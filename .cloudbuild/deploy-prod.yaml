steps:
  - id: 'build image'
    name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}', '.']

  - id: 'push image'
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}']

  - id: 'deploy prod service'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      [
        'run',
        'deploy',
        '${_SERVICE_NAME}',
        '--platform',
        'managed',
        '--region',
        '${_REGION}',
        '--allow-unauthenticated',
        '--image',
        'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}',
      ]

  # Force the new revision to serve 100% of traffic.
  - id: 'ensure prod service live'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      [
        'run',
        'services',
        'update-traffic',
        '${_SERVICE_NAME}',
        '--to-latest',
        '--platform',
        'managed',
        '--region',
        '${_REGION}',
      ]

  # Cleanup tags against closed pull requests
  - id: 'clean up old tag'
    name: 'gcr.io/${PROJECT_ID}/deployment-previews'
    secretEnv: ['GITHUB_TOKEN']
    args:
      [
        'cleanup',
        '--project-id',
        '${PROJECT_ID}',
        '--region',
        '${_REGION}',
        '--service',
        '${_SERVICE_NAME}',
        '--repo-name',
        '${_GITHUB_OWNER}/${REPO_NAME}',
      ]

substitutions:
  _SERVICE_NAME: portfolio-next
  _REGION: europe-west1
  _GITHUB_OWNER: $(push.repository.owner.name)

options:
  dynamicSubstitutions: true

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/GITHUB_PERSONAL_ACCESS_TOKEN/versions/latest
      env: 'GITHUB_TOKEN'
